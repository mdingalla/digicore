{"version":3,"sources":["serviceWorker.ts","component/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","MainApp","props","state","name","position","backgroundImage","e","fileReader","FileReader","file","target","files","onload","setState","result","readAsDataURL","className","style","this","type","onChange","currentTarget","value","handleBackgroundChange","bind","accept","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCC4GSC,G,kBAnHX,WAAYC,GAAW,IAAD,8BAClB,4CAAMA,KAEDC,MAAQ,CACTC,KAAK,GACLC,SAAS,GACTC,gBAAgB,MANF,E,oFAUCC,GAAQ,IAAD,OACpBC,EAAa,IAAIC,WACjBC,EAAOH,EAAEI,OAAOC,MAAM,GAE5BJ,EAAWK,OAAS,WAOhB,EAAKC,SAAS,CACVR,gBAAiBE,EAAWO,UAGlCP,EAAWQ,cAAcN,K,+BAKtB,IAAD,OAIJ,OAAO,6BAGH,yBAAKO,UAAU,8BACX,yBACAC,MACI,CACIZ,gBAAgB,OAAD,OAASa,KAAKhB,MAAMG,gBAApB,MAGvBW,UAAU,kBACV,yBAAKA,UAAU,gBACP,+BAAQE,KAAKhB,MAAMC,OAEvB,yBAAKa,UAAU,oBACX,+BAAQE,KAAKhB,MAAME,YAI/B,yBAAKY,UAAU,6BAEX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,mBACX,0CAGJ,yBAAKA,UAAU,mBACX,0CAGJ,yBAAKA,UAAU,mBACX,uEAGJ,yBAAKA,UAAU,mBACX,2CAGJ,yBAAKA,UAAU,mBACX,6CAMR,yBAAKA,UAAU,eACX,uHAMR,yBAAKA,UAAU,gBAEX,6BACI,2BAAOA,UAAU,IAAjB,SAGA,2BAAOG,KAAK,OAAOC,SAAU,SAAAd,GAAC,OAAG,EAAKO,SAAS,CAC3CV,KAAKG,EAAEe,cAAcC,YAI7B,6BACA,2BAAON,UAAU,IAAjB,aAGI,2BAAOG,KAAK,OAAOC,SAAU,SAAAd,GAAC,OAAG,EAAKO,SAAS,CAC3CT,SAASE,EAAEe,cAAcC,YAIjC,6BACI,2BAAOF,SAAUF,KAAKK,uBAAuBC,KAAKN,MAAOC,KAAK,OAAOM,OAAO,mB,GA5G1EC,IAAMC,YCF5BC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SFmI/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9eaedbfe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './index.css';\r\n\r\ninterface IState  {\r\n    name:string;\r\n    position:string\r\n    backgroundImage:any;\r\n}\r\n\r\n\r\nclass MainApp extends React.Component<any,IState>{\r\n    constructor(props:any){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            name:'',\r\n            position:'',\r\n            backgroundImage:null\r\n        }\r\n    }\r\n\r\n    handleBackgroundChange(e:any) {\r\n        const fileReader = new FileReader();\r\n        const file = e.target.files[0];\r\n\r\n        fileReader.onload = () => {\r\n            // this.background.style.backgroundImage = `url(${fileReader.result})`;\r\n            // console.log(fileReader.result)\r\n            // var img = new Image();\r\n            // img.src = fileReader.result;\r\n            // img.setAttribute('style', 'width:165px;');\r\n            // img.setAttribute('style', 'height:165px;');\r\n            this.setState({\r\n                backgroundImage: fileReader.result,\r\n              });\r\n          };\r\n          fileReader.readAsDataURL(file);\r\n\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n       \r\n\r\n        return <div>\r\n\r\n\r\n            <div className=\"employeeCard employeeFront\">\r\n                <div \r\n                style={\r\n                    {\r\n                        backgroundImage: `url(${this.state.backgroundImage})`\r\n                    }\r\n                }\r\n                className=\"employeePhoto\"></div>\r\n                <div className=\"employeeName\">\r\n                        <label>{this.state.name}</label>\r\n                    </div>\r\n                    <div className=\"employeePosition\">\r\n                        <label>{this.state.position}</label>\r\n                    </div>\r\n            </div>\r\n\r\n            <div className=\"employeeCard employeeBack\">\r\n\r\n                <div className=\"employeeData\">\r\n                    <div className=\"employeeDataRow\">\r\n                        <label>SSS No</label>\r\n                    </div>\r\n\r\n                    <div className=\"employeeDataRow\">\r\n                        <label>TIN No</label>\r\n                    </div>\r\n\r\n                    <div className=\"employeeDataRow\">\r\n                        <label>IN CASE OF EMERGENCY, PLEASE NOTIFY</label>\r\n                    </div>\r\n                    \r\n                    <div className=\"employeeDataRow\">\r\n                        <label>TEL No.</label>\r\n                    </div>\r\n\r\n                    <div className=\"employeeDataRow\">\r\n                        <label>Address.</label>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"back-footer\">\r\n                    <p>This ID Card is the property of DigiCORETech Inc. and must be surrendered upon demand.</p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"employeeCard\">\r\n\r\n                <div>\r\n                    <label className=\"\">\r\n                        Name:\r\n                    </label>\r\n                    <input type=\"text\" onChange={e=> this.setState({\r\n                        name:e.currentTarget.value\r\n                    })}/>\r\n                </div>\r\n\r\n                <div>\r\n                <label className=\"\">\r\n                        Position:\r\n                    </label>\r\n                    <input type=\"text\" onChange={e=> this.setState({\r\n                        position:e.currentTarget.value\r\n                    })}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <input onChange={this.handleBackgroundChange.bind(this)} type=\"file\" accept=\"image/*\" />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default MainApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport MainApp from './component/index';\n\nReactDOM.render(<MainApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}